(defvar hover-battery "false")
(defvar hover-ram "false")
(defvar hover-cpu "false")

(defwidget circular-widget [class value center]
  (overlay :width "20" :halign "center"
        (circular-progress
             :class "${class}_circular"
             :value "${value}"
             :start-at 75
             :thickness 4.5)
        (image :path "${center}")
  )
)

(defwidget circular-widget-text [class value center]
  (overlay :width "20" :halign "center"
      (label :text "${center}")
        (circular-progress
             :class "${class}"
             :value "${value}"
             :start-at 75
             :thickness 4)))


(defwidget core-indicator [value]
  (box :spacing "10"
    (label :text "${["▁", "▂", "▃", "▄", "▅", "▆", "▇", "█"][floor(value/12.5)]}"
           :style "color: ${colors[floor(value/10)]};"
    )
  )

   ;;,
  

)

(defwidget energy-window []

    (box :spacing "${spacing}" :space-evenly "false" :class "bar_1" :halign "center" :valign "center"
         :style "padding: 10px;" :orientation "v"
        
        (box :orientation "v" :space-evenly "false" :spacing {spacing}
          (label :text "ram:")
          (circular-progress :value {floor(EWW_RAM.used_mem_perc)}
                             :thickness 7
                             :start-at 75
                             :class "ram_circular_progress"
                  (label :text "${floor(EWW_RAM.used_mem_perc)}%")
          )
        )

       (box :orientation "h" :space-evenly "false" :spacing {spacing}
          (label :text "cpu:")
          
          (for core in {EWW_CPU.cores}
            (core-indicator :value {core.usage})
          )
         ;; (label :text "${floor(EWW_CPU.avg)}%")
        )
    )
)

(defwidget energy-indicator [class value center hover-var onhover onhoverlost hover-text] 
  (eventbox :onhover     {onhover}
            :onhoverlost {onhoverlost}
            :spacing {spacing}
            :width "35"

          (stack :selected {hover-var}
                 :transition "slidedown"
                 :same-size "true"
              (circular-widget  :class {class}
                                :value {value}
                                :center {center})

              (label  :text "${value}%" :class {class})
          )
  )
)


;; (defwidget energy []
;; 
;;     (box :spacing "${spacing/2}" :space-evenly "false"
;;         
;;         (energy-indicator :class "${(EWW_BATTERY.BAT0.capacity <= 20 && EWW_BATTERY.BAT0.status != 'Charging') ? "low-battery" : "green"}"
;;                           :value {min(EWW_BATTERY.BAT0.capacity, 100)}
;;                           :center "${EWW_BATTERY.BAT0.status == 'Charging' 
;;                                              ? "./icons/${theme}-theme/bolt.png" 
;;                                              : "./icons/${theme}-theme/dot.png"}"
;;                           :hover-var "${hover-battery}"
;;                           :onhover     "eww update hover-battery=true"
;;                           :onhoverlost "eww update hover-battery=false"
;;                           :hover-text "Battery: "
;;         )                
;; 
;;         (energy-indicator :class "peach"
;;                           :value {round(EWW_RAM.used_mem_perc,0)}
;;                           :center "./icons/${theme}-theme/dot.png"
;;                           :hover-var "${hover-ram}"
;;                           :onhover     "eww update hover-ram=true"
;;                           :onhoverlost "eww update hover-ram=false"
;;                           :hover-text "RAM: "
;;         )
;; 
;;         (energy-indicator :class "sapphire"
;;                           :value {round(EWW_CPU.avg,0)}
;;                           :center "./icons/${theme}-theme/dot.png"
;;                           :hover-var "${hover-cpu}"
;;                           :onhover     "eww update hover-cpu=true"
;;                           :onhoverlost "eww update hover-cpu=false"
;;                           :hover-text "CPU: "
;;         )
;;     )
;; )

;; (defwidget energy-indicator [class value center hover-var onhover onhoverlost hover-text] 
;;   (eventbox :onhover     {onhover}
;;             :onhoverlost {onhoverlost}
;; 
;;           (box :space-evenly "false" :spacing {spacing}
;;           
;;               (circular-widget  :class {class}
;;                                 :value {value}
;;                                 :center {center})
;; 
;;               (revealer :transition "slideleft"
;;                         :reveal {hover-var}
;;                         :duration "350ms"
;;                 (box :space-evenly "false"
;;                   (label :halign "start" :text {hover-text})
;;                   (label :halign "start" :text "${value}%" :class {class})
;;                 )
;;               )
;;           )
;;   )
;; )